import java_cup.runtime.*;
import java.util.*;
import java.io.*;

init with {:
       table = new HashMap<String, HashMap<String,Integer>>();
:};

parser code 	{:

    public HashMap<String, HashMap<String,Integer>> table;
    
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
    
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }
:};






//////////////////////////////////
///// SYMBOLS DECLARATION
/////////////////////////////////
terminal TOKEN,DATE,SEP;
terminal S,EQ,RO,RC,C,BO,BC,CM,DOT;
terminal MINUS,PLUS,STAR,DIV;
terminal START,MOVE,VAR,WHEN,DONE,THEN;
terminal NOT,AND,OR,NOTEQ,EQEQ;
terminal String NAME;
terminal Integer INT;



non terminal prog,header,commands;
non terminal token ;
non terminal Integer[] var,start_cmd,move,comands,cmd,move_list,when;
non terminal Integer mv,coordinate;
non terminal Object[] attr;
non terminal HashMap list_att;
non terminal Boolean bool_exp;
non terminal nt0;

precedence left OR;
precedence left EQEQ;
precedence left NOTEQ;
precedence left AND;
precedence right NOT;


//////////////////////////////////
///// GRAMMAR
/////////////////////////////////

start with prog;

prog::= header SEP commands;

header::= token DATE S token | token ; 

token::= token TOKEN S | ;
 
commands::= start_cmd comands  ;

start_cmd::= START coordinate:x CM coordinate:y CM coordinate:z S {: RESULT = new Integer[3];
														RESULT[0]=x;
														RESULT[1]=y;
														RESULT[2]=z;
														//save starting point
													:};

coordinate::= PLUS INT:x {:RESULT = +x;:}
			| MINUS INT:x {:RESULT = -x; :};	


comands::= comands cmd:x {:RESULT= x;:} | {:RESULT= (Integer[]) parser.stack(0); :}; //list empty 

cmd::= var:x {:RESULT = x;:} S | move:x {:RESULT= x;:} S| when:x {:RESULT=x;:} S;


move::= MOVE mv:x CM mv:y CM mv:z {: RESULT= new Integer[3];
							 RESULT[0]= ((Integer[])parser.stack(-6))[0] +x;
							 RESULT[1]= ((Integer[])parser.stack(-6))[1] +y;
							 RESULT[2]= ((Integer[])parser.stack(-6))[2] +z;	
							 System.out.println("POSITION: X="+RESULT[0]+ " Y="+RESULT[1]+" Z="+ RESULT[2]); 
							:} ;

mv::= coordinate:x {:RESULT= x;:} 
	| NAME:x DOT NAME:y {: RESULT = parser.table.get(x).get(y);	/*retriev the value associated to POS2.Y eg.*/
					:};


var::= VAR BO list_att:a BC NAME:s {: parser.table.put(s,a); RESULT = (Integer[])parser.stack(-5); :} ;

list_att::= list_att:m CM attr:x CM attr:y CM attr:z  {: 
											m.put(x[0],x[1]);
											m.put(y[0],y[1]);
											m.put(z[0],z[1]);
											RESULT = m; //return value into list_att
											:}
		| attr:x CM attr:y CM attr:z {: RESULT = new HashMap<String,Integer>();
								RESULT.put(x[0],x[1]);	//put into map name and value
								RESULT.put(y[0],y[1]);
								RESULT.put(z[0],z[1]);
								:} ;

attr::= NAME:x C coordinate:y {: RESULT= new Object[2];
						RESULT[0]= x;
						RESULT[1]=y;
						:};

	
nt0::= {:RESULT = (Integer[])parser.stack(-3); :};	//get array of position 	

when::= WHEN bool_exp THEN nt0 move_list:x DONE {:RESULT= x;:} ;

move_list::= move_list MOVE mv:x CM mv:y CM mv:z S {:Integer[] currentPos = (Integer[])parser.stack(-7);
									Boolean check = (Boolean) parser.stack(-10);
										if(check == true){
										RESULT = new Integer[3];
										 RESULT[0]= ((Integer[])parser.stack(-7))[0] +x;
										 RESULT[1]= ((Integer[])parser.stack(-7))[1] +y;
							 			 RESULT[2]= ((Integer[])parser.stack(-7))[2] +z;	
							 		System.out.println("POSITION: X="+RESULT[0]+ " Y="+RESULT[1]+" Z="+ RESULT[2]); 
									}
									else 
									RESULT= currentPos;
									:}
		|MOVE mv:x CM mv:y CM mv:z S {:  Integer[] currentPos = (Integer[])parser.stack(-7);
									
									Boolean check = (Boolean) parser.stack(-9);
									if(check == true){
										RESULT = new Integer[3];
										 RESULT[0]= currentPos[0] +x;
										 RESULT[1]= currentPos[1] +y;
							 			 RESULT[2]= currentPos[2] +z;	
							 		System.out.println("POSITION: X="+RESULT[0]+ " Y="+RESULT[1]+" Z="+ RESULT[2]); 
									}
									else 
									RESULT= currentPos;
								
								:};

bool_exp::= NOT bool_exp:x {:RESULT= !x ;:}
		| bool_exp:x AND bool_exp:y {:RESULT= x && y;:}
		| bool_exp:x OR bool_exp:y {:RESULT= x || y;:}
		| coordinate:x EQEQ NAME:y DOT NAME:z {:RESULT = (x == (parser.table.get(y).get(z)));  :}
		| NAME:x DOT NAME:y EQEQ coordinate:z {:RESULT = ((parser.table.get(x).get(y) == z)); :}
		| coordinate:x NOTEQ NAME:y DOT NAME:z {:RESULT = (x != (parser.table.get(x).get(y))); :} 
		| NAME:x DOT NAME:y NOTEQ coordinate:z {:RESULT = ((parser.table.get(x).get(y) != z)); :}  ;
		


















