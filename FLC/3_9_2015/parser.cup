import java_cup.runtime.*;
import java.util.HashMap;
import java.util.Arrays;

init with {:
 	 car_table = new HashMap<String, HashMap<String, Integer>>();
:};


parser code {:
  
	public HashMap<String, HashMap<String, Integer>> car_table;

    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (line "+line+", column "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }

public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }

:};


 

// Terminals / non Terminals section
terminal TOKEN1,TOKEN2,TOKEN3,SEP,PMM,PART,M,MS,ARROW;
terminal EQ, OR, CM, COL,RO, RC, SO,SC, S;
terminal  String QUOTE;
terminal  Integer NUM;

non terminal prog,header,car_list,race;
non terminal token_list,car,min_max_list, min_max;
non terminal Float parts,part,drive_stats;
non terminal  HashMap speeds;
non terminal  Object[] performance,section_names;
non terminal mark1,mark2;




start with prog;

prog::= header SEP car_list SEP race ;

//HEADER SECTION
/* Token 1 can appear 0 or more times, token 2 and 3 appear just one. 
 * Token can appear in any order*/

header::= token_list TOKEN2 S token_list TOKEN3 S
		| token_list TOKEN3 S token_list TOKEN2 S ;

token_list::= token_list TOKEN1 S | ;//empty


//CAR SECTION


car_list::= car_list car car | car car;

car::= QUOTE:x SO speeds:y SC 
{: /* Insert into the hmap name of the car and speeds(another hasttabel)*/parser.car_table.put(x,y);:};

speeds::= speeds:s CM QUOTE:x EQ NUM:y MS {:s.put(x,y); RESULT=s;  :}
		|QUOTE:x EQ NUM:y MS {: RESULT = new HashMap<String,Integer>();
				 			RESULT.put(x,y);
				 			
				 			:} ;



//RACE SECTION

race::= min_max_list performance:p{:System.out.println("WINNER: "+ p[0] +" "+ p[1]+" s");:};

min_max_list::=  min_max_list min_max | ;

min_max::= PMM RO QUOTE RC RO section_names:x RC S {: System.out.println("MIN:"+(Integer)x[0]+" MAX:"+(Integer)x[1]);:} ;

section_names::= section_names:x CM QUOTE:y 
					{:String car =(String)parser.stack(-5);
					
			 			HashMap<String,Integer> speeds = parser.car_table.get(car);
			 			Integer speed = (Integer) speeds.get(y);
			 			
			 			RESULT = new Object[2];
			 			if (speed < (Integer)x[0]){
			 			RESULT[0] = speed;
			 			RESULT[1] = x[1];
			 			}
			 			else if(speed > (Integer)x[1]) {
			 			RESULT[0] = x[0];
			 			RESULT[1] = speed;
			 			}
			 			else{
			 			RESULT[0] = x[0];
			 			RESULT[1] = x[1];
			 			} :}
			 | QUOTE:x {:String car =(String)parser.stack(-3);
			 			HashMap<String,Integer> speeds = parser.car_table.get(car);
			 			Integer speed = (Integer) speeds.get(x);
			 			RESULT = new Object[2];
			 			RESULT[0] = speed;
			 			RESULT[1] = speed;
			 			:};

//N.B QUANDO USI IL MARKER SI CONTA COSI: SOSTITUISCI MARK2 AL POSTO DI PARTS E POI INIZI A CONTARE DA 0 DAL PRECEDENTE
performance::= performance:p QUOTE:x {:System.out.println(x);:} ARROW parts:y S{:System.out.println("TOTAL: "+ y+ "s");
														//here save name of car and time 
														RESULT = new Object[2];
														if((float)p[1] < y ){
														RESULT[0]= p[0];
														RESULT[1]= p[1];
														}
														else{
														RESULT[0]= x;
														RESULT[1]= y;
														}
															:}
			|QUOTE:x {:System.out.println(x);:} ARROW parts:y S  {:System.out.println("TOTAL: "+ y+ "s");
														//here save name of car and time 
														RESULT = new Object[2];
														RESULT[0]= x;
														RESULT[1]= y;
														:};
			
			
mark1::= {: RESULT= parser.stack(-2); :};		//should be 1 but because of the print after quote we need a -1
mark2::= {: RESULT= parser.stack(-4); :};		//the same as before

parts::= parts:x OR mark2 part:y {:RESULT =x+y;  :}
			|  mark1 part:x {:RESULT = x; :};/* this marker allow to get car name when no list for drive stats is available*/


part::= PART NUM:x COL drive_stats:y{: RESULT=y; System.out.println("PART "+x +": " + y +" s");:};

//drive_stats here contains the value to print already computed.
drive_stats::= drive_stats:d CM QUOTE:x NUM:y M {:String car = (String)parser.stack(-8);
				 					HashMap<String,Integer> speeds = parser.car_table.get(car);
				 					Integer speed = (Integer) speeds.get(x);
				 					float result = (float) y.intValue() / (float)speed.intValue();
				 					RESULT= new Float(result);
				 					RESULT += d; //accumulate time in result
				 				
									:}
			|QUOTE:x NUM:y M {: String car =(String) parser.stack(-6);
				 		HashMap<String,Integer> speeds = parser.car_table.get(car);
				 		Integer speed = (Integer) speeds.get(x);
				 		float result = (float) y.intValue() / (float)speed.intValue();
				 		RESULT= new Float(result);
				 	
						:}; 




 
















